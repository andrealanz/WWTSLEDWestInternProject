p
View(PLchart3)
p <- plot_ly(
labels = c("Eve", "Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"),
parents = c("", "Eve", "Eve", "Seth", "Seth", "Eve", "Eve", "Awan", "Eve"),
values = c(10, 14, 12, 10, 2, 6, 6, 4, 4),
type = 'sunburst'
)
p
p <- plot_ly(
labels = PLchart3$labels[5:30],
parents = PLchart3$parents[5:30],
values = c(1:101),
type = 'sunburst'
)
p
length(1:101)
1:101
p <- plot_ly(
labels = PLchart3$labels[5:30],
parents = PLchart3$parents[5:30],
values = 1:101,
type = 'sunburst'
)
p
seq(1)
seq(10)
rep(1)
rep(1,5)
p <- plot_ly(
labels = PLchart3$labels[5:30],
parents = PLchart3$parents[5:30],
values = rep(4,101),
type = 'sunburst'
)
p
p <- plot_ly(
labels = PLchart3$labels,
parents = PLchart3$parents,
values = rep(4,101),
type = 'sunburst'
)
p
p <- plot_ly(
labels = PLchart3$labels,
parents = PLchart3$parents,
values = rep(4,101),
type = 'sunburst'
)
p
p <- plot_ly(
labels = PLchart3$labels,
parents = PLchart3$parents,
values = PLchart3$values,
type = 'sunburst'
)
p
View(p)
p2 <- plot_ly(
labels = c("Eve", "Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"),
parents = c("", "Eve", "Eve", "Seth", "Seth", "Eve", "Eve", "Awan", "Eve"),
values = c(10, 14, 12, 10, 2, 6, 6, 4, 4),
type = 'sunburst'
)
View(p2)
p <- plot_ly(
labels = PLchart3$labels,
parents = PLchart3$parents,
values = PLchart3$values,
type = 'sunburst'
)
p
p <- plot_ly(
labels = PLchart3$labels,
parents = PLchart3$parents,
values = PLchart3$values,
type = 'sunburst'
)
p
p <- plot_ly(
labels = c( "Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"),
parents = c( "Eve", "Eve", "Seth", "Seth", "Eve", "Eve", "Awan", "Eve"),
values = c( 14, 12, 10, 2, 6, 6, 4, 4),
type = 'sunburst'
)
p
parent_data <- aggregate(as.numeric(data$GP), by = list(data$`P&L`), FUN = sum)[,2]
chart3_data <- aggregate(as.numeric(data$GP), by = list(data$`P&L`, data$`External Rep`), FUN = sum)
parent_data
parent_data <- aggregate(as.numeric(data$GP), by = list(data$`P&L`), FUN = sum)
chart3_data <- aggregate(as.numeric(data$GP), by = list(data$`P&L`, data$`External Rep`), FUN = sum)
parent_data
parent_data <- aggregate(as.numeric(data$GP), by = list(data$`P&L`), FUN = sum)
parent_data <- cbind(data.frame(rep("Public", length(parent_data$Group.1))), parent_data)
View(parent_data)
chart3_data <- rbind(parent_data, chart3_data)
? rbind
View(chart3_values)
chart3_data <- rbind(parent_data, chart3_data, make.row.names = FALSE)
names(parent_data)
names(chart3_data) <- names(parent_data)
chart3_data <- rbind(parent_data, chart3_data)
View(chart3_data)
View(chart3_data)
PLchart3 <- data.frame(
labels=chart3_data[,2],
parents = chart3_data[,1],
values = chart3_data$x
)
View(PLchart3)
p <- plot_ly(
labels = PLchart3$labels,
parents = PLchart3$parents,
values = PLchart3$values,
type = 'sunburst'
)
p
View(PLchart3)
chart3_data[chart3_data$x < 0]
chart3_data[,chart3_data$x < 0]
chart3_data[chart3_data < 0] <- NA
View(chart3_data)
PLchart3 <- data.frame(
labels=chart3_data[,2],
parents = chart3_data[,1],
values = chart3_data$x
)
p <- plot_ly(
labels = PLchart3$labels,
parents = PLchart3$parents,
values = PLchart3$values,
type = 'sunburst'
)
p
parent_data$x <- parent_data$x/2
chart3_data <- aggregate(as.numeric(data$GP), by = list(data$`P&L`, data$`External Rep`), FUN = sum)
names(chart3_data) <- names(parent_data)
chart3_data <- rbind(parent_data, chart3_data)
chart3_data[chart3_data < 0] <- NA
parent_data <- aggregate(as.numeric(data$GP), by = list(data$`P&L`), FUN = sum)
parent_data <- cbind(data.frame(rep("Public", length(parent_data$Group.1))), parent_data)
parent_data$x <- parent_data$x/2
chart3_data <- aggregate(as.numeric(data$GP), by = list(data$`P&L`, data$`External Rep`), FUN = sum)
names(chart3_data) <- names(parent_data)
chart3_data <- rbind(parent_data, chart3_data)
PLchart3 <- data.frame(
labels=chart3_data[,2],
parents = chart3_data[,1],
values = chart3_data$x
)
p <- plot_ly(
labels = PLchart3$labels,
parents = PLchart3$parents,
values = PLchart3$values,
type = 'sunburst'
)
p
parent_data <- aggregate(as.numeric(data$GP), by = list(data$`P&L`), FUN = sum)
parent_data <- cbind(data.frame(rep("Public", length(parent_data$Group.1))), parent_data)
chart3_data <- aggregate(as.numeric(data$GP), by = list(data$`P&L`, data$`External Rep`), FUN = sum)
names(chart3_data) <- names(parent_data)
chart3_data <- rbind(parent_data, chart3_data)
PLchart3 <- data.frame(
labels=chart3_data[,2],
parents = chart3_data[,1],
values = chart3_data$x
)
p <- plot_ly(
labels = PLchart3$labels,
parents = PLchart3$parents,
values = PLchart3$values,
type = 'sunburst'
)
p
View(data)
View(PLchart3)
chart3_data <- aggregate(as.numeric(data$GP), by = list(data$`P&L`, data$`External Rep`), FUN = sum)
View(chart3_data)
parent_data <- aggregate(chart3_data$x, by = list(chart3_data$Group.1), FUN = sum)
View(parent_data)
chart3_data <- aggregate(as.numeric(data$GP), by = list(data$`P&L`, data$`External Rep`), FUN = sum)
parent_data <- aggregate(chart3_data$x, by = list(chart3_data$Group.1), FUN = sum)
parent_data <- cbind(data.frame(rep("Public", length(parent_data$Group.1))), parent_data)
names(chart3_data) <- names(parent_data)
chart3_data <- rbind(parent_data, chart3_data)
PLchart3 <- data.frame(
labels=chart3_data[,2],
parents = chart3_data[,1],
values = chart3_data$x
)
p <- plot_ly(
labels = PLchart3$labels,
parents = PLchart3$parents,
values = PLchart3$values,
type = 'sunburst'
)
p
PLchart3[,PLchart3$parents == "Federal Air Force"]
PLchart3[PLchart3$parents == "Federal Air Force"]
PLchart3$parents == "Federal Air Force"
PLchart3$parents[PLchart3$parents == "Federal Air Force"]
PLchart3$values[PLchart3$parents == "Federal Air Force"]
sum(PLchart3$values[PLchart3$parents == "Federal Air Force"])
p <- plot_ly(
labels = PLchart3$labels[1:50],
parents = PLchart3$parents[1:50],
values = PLchart3$values[1:50],
type = 'sunburst'
)
p
? plot_ly
p <- plot_ly(
labels = PLchart3$labels[1:24],
parents = PLchart3$parents[1:24],
values = PLchart3$values[1:24],
type = 'sunburst'
)
p
p <- plot_ly(
labels = PLchart3$labels,
parents = PLchart3$parents,
values = PLchart3$values,
type = 'sunburst',
branchvalues = 'total'
)
p
chart3_data <- aggregate(as.numeric(data$GP), by = list(data$`P&L`, data$`External Rep`), FUN = sum)
parent_data <- aggregate(chart3_data$x, by = list(chart3_data$Group.1), FUN = sum)
parent_data <- cbind(data.frame(rep("Public", length(parent_data$Group.1))), parent_data)
names(chart3_data) <- names(parent_data)
chart3_data <- rbind(parent_data, chart3_data)
PLchart3 <- data.frame(
labels=chart3_data[,2],
parents = chart3_data[,1],
values = chart3_data$x
)
p <- plot_ly(
labels = PLchart3$labels,
parents = PLchart3$parents,
values = PLchart3$values,
type = 'sunburst',
branchvalues = 'total'
)
p
p <- plot_ly(
labels = PLchart3$labels,
parents = PLchart3$parents,
values = PLchart3$values,
type = 'sunburst',
branchvalues = 'remainder'
)
p
p <- plot_ly(
labels = PLchart3$labels,
parents = PLchart3$parents,
values = PLchart3$values,
type = 'sunburst',
branchvalues = 'total'
)
p
data_pos <- data[data>= 0]
data_pos
data_pos <- data[data$GP>= 0]
data_pos[data_pos<0] <- NA
data_pos <- data
data_pos[data_pos<0] <- NA
data_pos <- data[data$GP > 0,]
data_pos <- data[data$GP > 0,]
chart3_data <- aggregate(as.numeric(data_pos$GP), by = list(data_pos$`P&L`, data_pos$`External Rep`), FUN = sum)
parent_data <- aggregate(chart3_data$x, by = list(chart3_data$Group.1), FUN = sum)
parent_data <- cbind(data.frame(rep("Public", length(parent_data$Group.1))), parent_data)
names(chart3_data) <- names(parent_data)
chart3_data <- rbind(parent_data, chart3_data)
PLchart3 <- data.frame(
labels=chart3_data[,2],
parents = chart3_data[,1],
values = chart3_data$x
)
p <- plot_ly(
labels = PLchart3$labels,
parents = PLchart3$parents,
values = PLchart3$values,
type = 'sunburst',
branchvalues = 'total'
)
p
p <- plot_ly(
labels = PLchart3$labels,
parents = PLchart3$parents,
values = PLchart3$values,
type = 'sunburst',
branchvalues = 'total'
)
p
p <- plot_ly(
labels = PLchart3$labels,
parents = PLchart3$parents,
values = PLchart3$values,
type = 'sunburst',
branchvalues = 'relative'
)
p
PLchart3 <- data.frame(
labels=chart3_data[,2],
parents = chart3_data[,1],
values = chart3_data$x
)
p <- plot_ly(
labels = PLchart3$labels,
parents = PLchart3$parents,
values = PLchart3$values,
type = 'sunburst',
branchvalues = 'relative'
)
p
install.packages("shinydashboard")
shiny::runApp()
getwd()
library(shiny)
library(ggplot2)
library(DT)
library(openxlsx)
library(here)
data <- read.xlsx(here("data", "Backlog_Master_07-12 Forecast.xlsx"),sheet = 4, colNames = TRUE)
data <- read.xlsx(here("data", "Backlog_Master_07-12 Forecast.xlsx"),sheet = 4, colNames = TRUE)
colnames(data) <- as.character(unlist(data[1,]))
data <- data[-1, ]
runApp()
runApp()
runApp()
data <- read.xlsx(here("data", "Backlog_Master_07-12 Forecast.xlsx"),sheet = 4, colNames = TRUE)
colnames(data) <- as.character(unlist(data[1,]))
data <- data[-1, ]
chart_data <- data.frame("Category" = unique(data$`P&L`),GP = aggregate(as.numeric(data$GP), by = list(data$`P&L`), FUN = sum)[,2])
p <- plot_ly(chart_data, labels = ~Category, values = ~GP, type = 'pie')
p
library(plotly)
runApp()
? plotlyOutput
runApp()
? box
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
? plotOutput
runApp()
runApp()
? fluidRow
? plotly
? plot_ly
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
? dashboardBody
runApp()
runApp()
? box
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
? box
runApp()
runApp()
runApp()
runApp()
column(4,
hr(),
verbatimTextOutput('out3'),
selectInput('in3', 'Options', state.name, multiple=TRUE, selectize=FALSE)
)
? hr
runApp()
runApp()
chart_data <- data[data$`P&L` == input$`P&L`]
View(data)
runApp()
runApp()
runApp()
runApp()
runApp()
View(chart_data)
chart_data <- data[data$`P&L` == "Federal Air Force"]
chart_data <- data[data$`P&L` == "Federal Air Force",]
runApp()
chart_data <- data[data$`P&L` == "Federal Air Force",]
chart_data <- data.frame("Category" = unique(chart_data$`External Rep`),
GP = aggregate(as.numeric(chart_data$GP, by = list(chart_data$`External Rep`), FUN = sum)[,2]))
View(chart_data)
runApp()
shiny::runApp()
runApp()
runApp()
install.packages("readxl")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(readxl)
runApp()
runApp()
runApp()
install.packages("openxlsx")
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate) #need to have Python and Conda installed (easiest way is by installing Anaconda, then adding it to your system path)
library(shiny)
library(readxl)
library(tools)
#run backend python code
source_python("csv_reader.py")
#read in list of vendors and manufacturers
vendors <- read_excel("ActiveVendors.xls")
vendors <- sort(vendors$NAME)   #alphabetize vendors
manufacturers <- read_excel("ActiveMFGs.xls")
manufacturers <- sort(manufacturers$NAME)
#create 1st input UI pane
inputPanel(
#file upload interface
fileInput("file1", "Choose CSV File",
multiple = FALSE,
accept = c(".csv")),
#vendor search interface
selectizeInput("vendorChoice", "Vendor", vendors, selected = NULL, multiple = FALSE,
options = list(
#create placeholder
placeholder = 'Select a vendor',
onInitialize = I('function() { this.setValue(""); }'))
),
#manufacturer search (is not required to view/download csv and will automatically populate column if in original file)
selectizeInput("manufacturerChoice", "Manufacturers", manufacturers, selected = NULL, multiple = FALSE,
options = list(
#create placeholder
placeholder = 'Select a manufacturer:',
onInitialize = I('function() { this.setValue(""); }'))
)
)
#observe changes in user input
observe({
#run csv reader if .csv file uploaded, vendor selected
if(!is.null(input$file1)){
if(input$vendorChoice != "" && file_ext((input$file1)$datapath) == "csv"){
inFile <- input$file1
#error handle python function
error <<- try(
#generate .csv template
csv_avt(inFile$name,inFile$datapath, input$vendorChoice,input$manufacturerChoice)
)
#save .csv generated
mydata <<- read.csv(paste('wwt_',(input$file1)$name, sep = ""), check.names = FALSE)
#remove temporary file
file.remove(paste('wwt_',(input$file1)$name, sep = ""))
}
}
})
#text output
renderText({
if(!is.null(input$file1)){
#handle incorrect file extension
if(file_ext((input$file1)$datapath) != "csv"){
"Error: Incorrect file extension"
}
#check if a file was generated
else if(input$vendorChoice != ""){
if(file_ext((input$file1)$datapath) == "csv"
&& is.null(error)){
"Template Created"
}
else{
"Invalid Data"
}
}
}
})
#render download button
output$download_button <- renderUI({
#button rendered if conditions hold
if(!is.null(input$file1)) {
if(input$vendorChoice != ""
&& file_ext((input$file1)$datapath) == "csv"){
if(is.null(error)){
downloadButton("download", "Download")
}
}
}
})
